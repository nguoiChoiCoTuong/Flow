// -------------------------------
// üåç Kh·ªüi t·∫°o b·∫£n ƒë·ªì
// -------------------------------
var map = L.map("map").setView([16, 107], 5);
L.tileLayer(
    'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png',
    {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/">CARTO</a>',
        subdomains: 'abcd',
        maxZoom: 19
    }
).addTo(map);

// -------------------------------
// üîß Bi·∫øn to√†n c·ª•c
// -------------------------------
let currentUnit = "C"; // "C" ho·∫∑c "F"
let currentCity = "Hanoi";
let userContext = "general"; // "general", "travel", "sports", "work", "outdoor"

const cities = {
  "Hanoi": [21.0285, 105.8542],
  "Ho Chi Minh": [10.7769, 106.7009],
  "Da Nang": [16.0471, 108.2068],
  "Can Tho": [10.0452, 105.7469]
};

// -------------------------------
// üì° Fetch d·ªØ li·ªáu t·ª´ API
// -------------------------------
async function fetchNASAData(lat, lon) {
  const today = new Date();
  const end = today.toISOString().split("T")[0].replace(/-/g, "");
  const startDate = new Date();
  startDate.setDate(today.getDate() - 5);
  const start = startDate.toISOString().split("T")[0].replace(/-/g, "");

  const url = `https://power.larc.nasa.gov/api/temporal/daily/point?parameters=T2M,RH2M,WS2M&community=RE&longitude=${lon}&latitude=${lat}&start=${start}&end=${end}&format=JSON`;

  const res = await fetch(url);
  const data = await res.json();
  return data.properties.parameter; // { T2M, RH2M, WS2M }
}

async function fetchMeteoData(lat, lon) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=precipitation_probability,temperature_2m,cloud_cover,visibility,wind_speed_10m,relative_humidity_2m&timezone=auto`;
  const res = await fetch(url);
  const data = await res.json();
  return data.hourly;
}

function normalizeForecast(hourly) {
  const result = {};
  const times = hourly.time;

  times.forEach((t, i) => {
    const day = t.split("T")[0]; // l·∫•y YYYY-MM-DD
    if (!result[day]) {
      result[day] = {
        temp: [],
        humidity: [],
        wind: [],
        rainProb: [],
        cloud: [],
        visibility: []
      };
    }
    result[day].temp.push(hourly.temperature_2m[i]);
    result[day].humidity.push(hourly.relative_humidity_2m[i]);
    result[day].wind.push(hourly.wind_speed_10m[i]);
    result[day].rainProb.push(hourly.precipitation_probability[i]);
    result[day].cloud.push(hourly.cloud_cover[i]);
    result[day].visibility.push(hourly.visibility[i] / 1000); // Chuy·ªÉn t·ª´ m sang km
  });

  // T√≠nh trung b√¨nh m·ªói ng√†y
  const daily = {};
  Object.keys(result).forEach(day => {
    daily[day] = {
      avgTemp: avg(result[day].temp),
      avgHumidity: avg(result[day].humidity),
      avgWind: avg(result[day].wind),
      maxRainProb: Math.max(...result[day].rainProb),
      avgCloud: avg(result[day].cloud),
      avgVisibility: avg(result[day].visibility)
    };
  });

  return daily;
}

function avg(arr) {
  return arr.length > 0 ? arr.reduce((a, b) => a + b, 0) / arr.length : null;
}

async function fetchForecastData(lat, lon) {
  const [nasaData, meteoData] = await Promise.all([fetchNASAData(lat, lon), fetchMeteoData(lat, lon)]);
  const hourly = meteoData;
  const normalized = normalizeForecast(hourly);
  const today = new Date().toISOString().split("T")[0];
  return {
    nasaData,
    meteoData,
    ...normalized[today] || {},
    time: Object.keys(normalized).slice(0, 5) // 5 ng√†y
  };
}

// -------------------------------
// üé® UI Update
// -------------------------------
async function updateWeather(city) {
  currentCity = city;
  const [lat, lon] = cities[city];

  try {
    console.log("Fetching data for", city, lat, lon);
    const forecastData = await fetchForecastData(lat, lon);
    const nasaData = await fetchNASAData(lat, lon);
    console.log("NASA Data:", nasaData);
    console.log("Forecast Data:", forecastData);

    // D·ªØ li·ªáu h√¥m nay t·ª´ NASA
    const tempToday = nasaData.T2M ? toNumber(Object.values(nasaData.T2M)[0]) : null;
    const humidityToday = nasaData.RH2M ? toNumber(Object.values(nasaData.RH2M)[0]) : null;
    const windToday = nasaData.WS2M ? toNumber((Object.values(nasaData.WS2M)[0] * 3.6).toFixed(1)) : null;

    // D·ªØ li·ªáu t·ª´ forecast
    const todayData = forecastData || {};
    const avgTemp = todayData.avgTemp !== undefined ? todayData.avgTemp : tempToday;
    const rainProb = todayData.maxRainProb !== undefined ? todayData.maxRainProb : 0;
    const cloudCover = todayData.avgCloud !== undefined ? todayData.avgCloud : 0;
    const visibility = todayData.avgVisibility !== undefined ? todayData.avgVisibility : "--";

    console.log("Processed Data:", { avgTemp, humidityToday, windToday, rainProb, cloudCover, visibility });

    // C·∫≠p nh·∫≠t UI
    document.getElementById("city-name").innerText = city;
    document.getElementById("desc").innerText = "Data from Open-Meteo & NASA";
    document.getElementById("temp").innerText = avgTemp !== null ? formatTemp(avgTemp) : "--";
    document.getElementById("humidity").innerText = humidityToday !== null ? humidityToday + "%" : "--";
    document.getElementById("wind").innerText = windToday !== null ? windToday + " km/h" : "--";
    document.getElementById("visibility").innerText = visibility !== "--" ? visibility + " km" : "--";

    // Forecast 5 ng√†y
    const forecastContainer = document.getElementById("forecast-container");
    forecastContainer.innerHTML = "";
    const days = forecastData.time || [];
    days.forEach((day, i) => {
      const dayData = normalizeForecast(forecastData.meteoData)[day] || {}; // S·ª≠ d·ª•ng meteoData t·ª´ forecastData
      const div = document.createElement("div");
      div.className = "forecast-day";
      div.innerHTML = `
        <span>${day}</span>
        <span>${dayData.avgTemp !== undefined ? Math.round(dayData.avgTemp) : "--"}¬∞C</span>
        <span>‚òÅÔ∏è ${dayData.avgCloud !== undefined ? Math.round(dayData.avgCloud) : "--"}%</span>
        <span>üíß ${dayData.maxRainProb !== undefined ? Math.round(dayData.maxRainProb) : "--"}%</span>
      `;
      forecastContainer.appendChild(div);
    });

    // L·ªùi khuy√™n
    const adviceList = generateAdvice(
      avgTemp,
      "Weather data",
      humidityToday,
      windToday,
      userContext,
      rainProb,
      cloudCover,
      visibility
    );
    const adviceUl = document.getElementById("advice-list");
    adviceUl.innerHTML = "";
    adviceList.forEach(advice => {
      const li = document.createElement("li");
      li.textContent = advice;
      adviceUl.appendChild(li);
    });

  } catch (err) {
    console.error("Error fetching data:", err);
    document.getElementById("city-name").innerText = city;
    document.getElementById("desc").innerText = "‚ö†Ô∏è Data unavailable";
  }
}
// -------------------------------
// üìÖ L·∫•y th·ªùi ti·∫øt theo ng√†y ch·ªçn
// -------------------------------
async function fetchWeatherForDate() {
  const dateInput = document.getElementById("date-picker").value;
  if (!dateInput) {
    alert("Please select a date first!");
    return;
  }

  const [lat, lon] = cities[currentCity];
  const day = dateInput.replace(/-/g, "");

  try {
    // L·∫•y d·ªØ li·ªáu NASA POWER
    const nasaUrl = `https://power.larc.nasa.gov/api/temporal/daily/point?parameters=T2M,T2M_MIN,T2M_MAX,RH2M,WS2M&community=RE&longitude=${lon}&latitude=${lat}&start=${day}&end=${day}&format=JSON`;
    const nasaRes = await fetch(nasaUrl);
    const nasaData = await nasaRes.json();

    if (!nasaData.properties || !nasaData.properties.parameter) {
      throw new Error("NASA POWER: d·ªØ li·ªáu r·ªóng ho·∫∑c sai c·∫•u tr√∫c");
    }

    const weather = nasaData.properties.parameter;
    const safeGet = (param) => weather[param] && weather[param][day] !== undefined ? weather[param][day] : "--";

    // L·∫•y d·ªØ li·ªáu Open-Meteo
    const omUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=precipitation_probability,cloud_cover,visibility&timezone=auto&start_date=${dateInput}&end_date=${dateInput}`;
    const omRes = await fetch(omUrl);
    const omData = await omRes.json();

    function dailyAvg(arr) {
      return arr && arr.length > 0 ? (arr.reduce((a, b) => a + b, 0) / arr.length).toFixed(1) : "--";
    }

    const cityData = {
      current: {
        temp: safeGet("T2M"),
        tempMin: safeGet("T2M_MIN"),
        tempMax: safeGet("T2M_MAX"),
        desc: "NASA + OpenMeteo",
        humidity: safeGet("RH2M"),
        wind: safeGet("WS2M") !== "--" ? (safeGet("WS2M") * 3.6).toFixed(1) : "--",
        cloud: dailyAvg(omData.hourly?.cloud_cover || []),
        rainProb: dailyAvg(omData.hourly?.precipitation_probability || []),
        visibility: dailyAvg(omData.hourly?.visibility || []) / 1000 // Chuy·ªÉn sang km
      },
    };

    updateWeatherFromAPI(currentCity, cityData);

  } catch (err) {
    console.error("API fetch error:", err);
    document.getElementById("desc").innerText = "‚ö†Ô∏è Data unavailable";
  }
}

// -------------------------------
// üéØ Render t·ª´ NASA cho 1 ng√†y c·ª• th·ªÉ
// -------------------------------
function updateWeatherFromAPI(city, cityData) {
  const current = cityData.current;

  const temp = toNumber(current.temp);
  const tempMin = toNumber(current.tempMin);
  const tempMax = toNumber(current.tempMax);
  const humidity = toNumber(current.humidity);
  const wind = toNumber(current.wind);
  const cloud = toNumber(current.cloud);
  const rainProb = toNumber(current.rainProb);
  const visibility = toNumber(current.visibility);

  document.getElementById("city-name").innerText = city;
  document.getElementById("desc").innerText = current.desc;
  document.getElementById("temp").innerText = formatTemp(temp);
  document.getElementById("humidity").innerText = humidity !== null ? humidity + "%" : "--";
  document.getElementById("wind").innerText = wind !== null ? wind + " km/h" : "--";
  if (cloud !== null && document.getElementById("cloud")) {
    document.getElementById("cloud").innerText = cloud + "%";
  }
  if (rainProb !== null && document.getElementById("rainProb")) {
    document.getElementById("rainProb").innerText = rainProb + "%";
  }
  if (visibility !== null && document.getElementById("visibility")) {
    document.getElementById("visibility").innerText = visibility + " km";
  }

  document.getElementById("forecast-container").innerHTML = "";

  const avgTemp = (tempMax !== null && tempMin !== null) ? (tempMax + tempMin) / 2 : temp;

  const adviceList = generateAdvice(
    avgTemp,
    current.desc,
    humidity,
    wind,
    userContext,
    rainProb,
    cloud,
    visibility
  );

  const adviceUl = document.getElementById("advice-list");
  adviceUl.innerHTML = "";
  adviceList.forEach(advice => {
    const li = document.createElement("li");
    li.textContent = advice;
    adviceUl.appendChild(li);
  });
}

// -------------------------------
// üßæ C√°c h√†m ti·ªán √≠ch
// -------------------------------
function formatTemp(celsiusValue) {
  if (celsiusValue === "--" || celsiusValue === null) return "--";
  if (currentUnit === "C") {
    return Math.round(celsiusValue) + "¬∞C";
  } else {
    return Math.round((celsiusValue * 9 / 5) + 32) + "¬∞F";
  }
}

function toggleUnit() {
  currentUnit = currentUnit === "C" ? "F" : "C";
  updateWeather(currentCity);
}

function generateAdvice(temp, desc, humidity, wind, context, rainProb, cloud, visibility) {
  const rules = [
    { condition: d => d.temp !== null && d.temp < 0, advice: "ü•∂ R·∫•t l·∫°nh, m·∫∑c nhi·ªÅu l·ªõp." },
    { condition: d => d.temp !== null && d.temp < 10, advice: "üß• L·∫°nh, n√™n m·∫∑c √°o kho√°c." },
    { condition: d => d.temp !== null && d.temp > 30, advice: "üî• N√≥ng, m·∫∑c ƒë·ªì m·ªèng v√† u·ªëng ƒë·ªß n∆∞·ªõc." },
    { condition: d => d.temp !== null && d.temp > 25 && d.temp <= 30, advice: "üòé Th·ªùi ti·∫øt d·ªÖ ch·ªãu, m·∫∑c ƒë·ªì nh·∫π." },

    { condition: d => d.rainProb !== null && d.rainProb > 70, advice: "‚òî Kh·∫£ nƒÉng m∆∞a cao, n√™n mang √¥ ho·∫∑c √°o m∆∞a." },
    { condition: d => d.rainProb !== null && d.rainProb > 40 && d.rainProb <= 70, advice: "üå¶Ô∏è C√≥ th·ªÉ c√≥ m∆∞a r√†o, ch√∫ √Ω khi ra ngo√†i." },

    { condition: d => /Snow|‚ùÑÔ∏è/.test(d.desc), advice: "‚ùÑÔ∏è C√≥ tuy·∫øt, c·∫©n th·∫≠n tr∆°n tr∆∞·ª£t." },

    { condition: d => d.cloud !== null && d.cloud > 70, advice: "‚òÅÔ∏è Tr·ªùi nhi·ªÅu m√¢y, √°nh s√°ng y·∫øu." },
    { condition: d => d.cloud !== null && d.cloud < 30, advice: "üåû Tr·ªùi quang, c√≥ th·ªÉ c√≥ n·∫Øng g·∫Øt." },

    { condition: d => d.visibility !== null && d.visibility < 2, advice: "üå´Ô∏è T·∫ßm nh√¨n k√©m, l√°i xe c·∫ßn ch√∫ √Ω." },
    { condition: d => d.visibility !== null && d.visibility < 0.5, advice: "üö® S∆∞∆°ng m√π d√†y, h·∫°n ch·∫ø l√°i xe ƒë∆∞·ªùng d√†i." },

    { condition: d => d.wind !== null && d.wind > 50, advice: "üí® Gi√≥ r·∫•t m·∫°nh, h·∫°n ch·∫ø ra ngo√†i." },
    { condition: d => d.wind !== null && d.wind > 25 && d.wind <= 50, advice: "üçÉ Gi√≥ kh√° m·∫°nh, c·∫ßn ch√∫ √Ω." },

    { condition: d => d.humidity !== null && d.humidity > 80, advice: "üíß ƒê·ªô ·∫©m cao, d·ªÖ c·∫£m th·∫•y oi b·ª©c." },

    { condition: d => d.context === "travel" && d.rainProb !== null && d.rainProb > 50, advice: "üöó Tr·ªùi m∆∞a, ƒë∆∞·ªùng tr∆°n tr∆∞·ª£t khi l√°i xe." },
    { condition: d => d.context === "travel" && d.temp !== null && d.temp > 32, advice: "üß≥ Mang th√™m n∆∞·ªõc u·ªëng khi ƒëi du l·ªãch." },

    { condition: d => d.context === "work" && d.temp !== null && d.temp < 15, advice: "üíº Tr·ªùi l·∫°nh, m·∫∑c g·ªçn g√†ng khi ƒëi l√†m." },
    { condition: d => d.context === "work" && d.cloud !== null && d.cloud < 40, advice: "‚òÄÔ∏è Ng√†y ƒë·∫πp, ƒëi l√†m s·∫Ω d·ªÖ ch·ªãu h∆°n." },

    { condition: d => d.context === "sport" && d.temp !== null && d.temp > 30, advice: "üèÉ Tr√°nh t·∫≠p ngo√†i tr·ªùi l√∫c tr∆∞a." },
    { condition: d => d.context === "sport" && d.wind !== null && d.wind > 30, advice: "‚öΩ Gi√≥ to, h·∫°n ch·∫ø c√°c m√¥n ngo√†i tr·ªùi." },

    { condition: d => d.context === "outdoor" && d.rainProb !== null && d.rainProb > 50, advice: "üåßÔ∏è M∆∞a, kh√¥ng n√™n t·ªï ch·ª©c ho·∫°t ƒë·ªông ngo√†i tr·ªùi." },
    { condition: d => d.context === "outdoor" && d.temp !== null && d.temp < 10, advice: "üß• Tr·ªùi l·∫°nh, n·∫øu ra ngo√†i n√™n mang √°o ·∫•m." },
  ];

  const input = { temp, desc, humidity, wind, context, rainProb, cloud, visibility };
  return rules.filter(rule => rule.condition(input)).map(rule => rule.advice);
}

function updateDate() {
  const now = new Date();
  const options = { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', hour12: false };
  document.getElementById("date-display").textContent = now.toLocaleDateString('en-GB', options) + " +07";
}

function changeContext() {
  userContext = document.getElementById("context-select").value;
  updateWeather(currentCity);
}

function toNumber(val) {
  if (val === "--" || val === undefined || val === null) return null;
  return Number(val);
}

// -------------------------------
// üöÄ Kh·ªüi ƒë·ªông m·∫∑c ƒë·ªãnh
// -------------------------------
for (let city in cities) {
  L.marker(cities[city]).addTo(map).on("click", () => {
    updateWeather(city);
    map.flyTo(cities[city], 10, { animate: true, duration: 1.5 });
  });
}

// G·∫Øn s·ª± ki·ªán cho date-picker
document.getElementById("date-picker").addEventListener("change", fetchWeatherForDate);

// Kh·ªüi ƒë·ªông m·∫∑c ƒë·ªãnh
updateWeather("Hanoi");
updateDate();